#+TITLE: Emacs Configuration
#+AUTHOR: Gregory Loftus
#+UPDATED: [2022-01-23 Sun]
#+PROPERTY: header-args :tangle ./init.el


The following org file consists of the various pieces of my init.el emacs config.

The build command in emacs is org-babel-tangle (usually =C-c C-v t=).

* Environment
*** Header

In order to generate a build date every time the file is tangled,
there is a source block that echos the build time (using the =date= command).
At build time, this shell source block is called by the emacs-lisp source block
below using the noweb syntax =<<FUNCTION()>>=.

See [[https://emacs.stackexchange.com/questions/13322/is-it-possible-to-tangle-results-block][here]] for more details.

#+NAME: UPDATE
#+BEGIN_SRC sh :tangle no
UPDATE="$(date)"
echo ";; Build date:" ${UPDATE}
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb yes :padline no
;; Filename: init.el
;; Author: Gregory Loftus
<<UPDATE()>>
;; Source: github.com/gloftus/linty-swigs/emacs/init.org
#+END_SRC

*** Path Mgmt

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp/")
(setq custom-file "~/.emacs.d/elisp/customize.el")
(setq backup-directory-alist '(("." . "/home/gloftus/.emacs.d/backup")))

#+END_SRC

*** Bug fixes

#+BEGIN_SRC emacs-lisp
;; a bugfix for deprecated common lisp package
(setq byte-compile-warnings '(cl-functions))

#+END_SRC

*** Package Mgmt

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org"   . "https://orgmode.org/elpa/")
                         ("elpa"  . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(setq use-package-always-ensure t)

#+END_SRC

*** Keybindings

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.
[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for
evil-mode.

#+BEGIN_SRC emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general
  :config
  (general-create-definer efs/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (efs/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

*** Navigation

#+BEGIN_SRC emacs-lisp
;; my prefered window switching
(global-set-key (kbd "C-<right>") 'other-window)
(global-set-key (kbd "C-<left>") 'other-window)

#+END_SRC

* Appearance
*** UI Elements

unicode fill column indicator options in Hack: 9474 9478 9482 9550

TODO: visual line mode and visual line fill column mode not working :(

#+BEGIN_SRC emacs-lisp
(setq-default
 confirm-kill-emacs 'yes-or-no-p
 cursor-in-non-selected-windows t            ; Hide the cursor in inactive windows
 help-window-select t                        ; Focus new help windows when opened
 inhibit-startup-screen t
 initial-scratch-message ""
 select-enable-clipboard t                   ; Merge system's and Emacs' clipboard
 uniquify-buffer-name-style 'forward
 indent-tabs-mode nil
 tab-width 4
 scroll-margin 10                            ; Add a margin when scrolling vertically
 scroll-conservatively most-positive-fixnum  ; Always scroll by one line
 show-trailing-whitespace nil                  ; Display trailing whitespaces
)

(when window-system
  (blink-cursor-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)
  (menu-bar-mode 0))

(fset 'yes-or-no-p 'y-or-n-p)
(setq frame-title-format (concat  "%b - emacs@" (system-name)))

#+END_SRC

*** Line Numbers

#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(global-display-line-numbers-mode t)
(dolist (mode '(org-mode-hook
                org-agenda-finalize-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC

*** Visual Line and Fill

We use visual line mode to soft wrap long lines.

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to wrap lines at the =fill-column= indicator.
We also use visual-fill-column to center =org-mode= buffers for a more
pleasing writing experience as it centers the contents of the buffer
horizontally to seem more like you are editing a document.  This is really
a matter of personal preference so you can remove the block below if you
don't like the behavior.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
(global-display-fill-column-indicator-mode 1)

(defun gwl/org-mode-visual-fill ()
 (setq visual-fill-column-width 100
  visual-fill-column-center-text t)
 (visual-fill-column-mode 1))

(use-package visual-fill-column
  :init
  (global-visual-fill-column-mode 1)
  (setq-default display-fill-column-indicator-character 9550)
  (setq-default display-fill-column-indicator-column 79)
  :hook (org-mode . gwl/org-mode-visual-fill))

(dolist (mode '(org-agenda-finalize-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-fill-column-indicator-mode 0))))

#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-palenight t))

#+END_SRC

*** Fonts

I like the Hack font, but it won't be set unless it's installed.

#+BEGIN_SRC emacs-lisp
(defun gwl/font-exists (font) "check if font exists"
  (if (null (x-list-fonts font)) nil t))
(if (gwl/font-exists "Hack")
  (set-face-attribute 'default nil :font "Hack" :height 130))

#+END_SRC

*** doom-modeline

The default configuration is quite good but you can check out the
[[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need
to run `M-x all-the-icons-install-fonts` so that mode line icons display
correctly.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+END_SRC

*** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel
that appears when you start pressing any key binding in Emacs to offer you all
possible completions for the prefix.  For example, if you press =C-c= (hold
control and press the letter =c=), a panel will appear at the bottom of the
frame displaying all of the bindings under that prefix and which command they
run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+END_SRC

*** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for
Emacs.  It provides a minimal yet powerful selection menu that appears when you
open files, switch buffers, and for many other tasks in Emacs.  Counsel is a
customized set of commands to replace `find-file` with `counsel-find-file`, etc
which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of
the Counsel commands to provide more information about each item.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind (
    ("C-s" . swiper)
    :map ivy-minibuffer-map
      ("TAB" . ivy-alt-done)
      ("C-l" . ivy-alt-done)
      ("C-j" . ivy-next-line)
      ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
      ("C-k" . ivy-previous-line)
      ("C-l" . ivy-done)
      ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
      ("C-k" . ivy-previous-line)
      ("C-d" . ivy-reverse-i-search-kill))
  :config (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
    :map minibuffer-local-map ("C-r" . 'counsel-minibuffer-history))
  :custom (counsel-linux-app-format-function
           #'counsel-linux-app-format-function-name-only)
  :config (counsel-mode 1))

#+END_SRC

**** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion
candidates based on how recently or frequently you select them.  This can be
especially helpful when using =M-x= to run commands that you don't have bound to
a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and
streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]]
for more details on how to configure it!

#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  ;(prescient-persist-mode 1)
(ivy-prescient-mode 1))

#+END_SRC

*** Helpful

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function) ([remap
    describe-command] . helpful-command) ([remap describe-variable]
    . counsel-describe-variable) ([remap describe-key] . helpful-key))

#+END_SRC

* Programming languages
*** General

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(global-subword-mode 1)      ; Iterate through CamelCase words

#+END_SRC

*** Javascript
?
*** Python

I think this is deprecated.

#+BEGIN_SRC emacs-lisp :tangle no
(defun my-python-mode-hook ()
  (linum-mode 1)
  (fci-mode 1)
  (hl-line-mode 1)
  (set-face-foreground 'highlight nil)
  (set-face-background 'hl-line "#2e3436")) ;; originally #3e4446
(add-hook 'python-mode-hook 'my-python-mode-hook)

#+END_SRC

*** Web mode

?

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
;;  :delight web-mode "Web"
;;  :config (setq-default web-mode-enable-auto-indentation nil)
)
#+END_SRC

* Features
*** Org mode
**** TODO Formatting
Should you pull all that "customize" code out of customize.el?
**** Agenda and Capture

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(setq org-agenda-window-setup 'other-window)
(setq org-deadline-warning-days 45)

(setq org-agenda-span 8
      org-agenda-start-on-weekday nil
      org-agenda-start-day "+0d")

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n")
        ("e" "Emacs Complaints" entry (file+headline "~/pgm/emacs/emacs.org" "complaints")
         "** %?\nEntered on %U\n")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n")))
      
#+END_SRC

#+RESULTS:
| t | Todo | entry | (file+headline ~/org/gtd.org Tasks) | * TODO %? |

**** Babel

These babel enhancements are considered minimal requirement
for init.org development with source blocks!

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t) ;; fontify source blocks
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages '(
  (python . t) (java . t) (js . t) (C . t) (R . t) (shell . t) (emacs-lisp . t)
))

#+END_SRC

**** Export Settings
#+BEGIN_SRC emacs-lisp
(setq org-export-backends (quote (ascii html icalendar latex md)))
(setq org-catch-invisible-edits 'show-and-error)

#+END_SRC

**** Invisible edits

#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'show-and-error)

#+END_SRC

**** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks
into your Org files in combination with =org-tempo= by typing =<= followed by the
template name like =el= or =py= and then press =TAB=.  For example, to insert an
empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into
such a block.

You can add more =src= block templates below by copying one of the lines and
changing the two strings at the end, the first to be the template name and the
second to contain the name of the language
[[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by
Org Babel]].

#+BEGIN_SRC emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+END_SRC

**** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that
=gwl/org-babel-tangle-config= gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you're
looking at right now, and if so, automatically exports the configuration here to
the associated output files.

#+BEGIN_SRC emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun gwl/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'gwl/org-babel-tangle-config)))

#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+END_SRC

*** Auctex and pdf-tools

Auctex replaces tex so it can't be "use-packaged" by itself.

#+BEGIN_SRC emacs-lisp
(use-package tex
 :ensure auctex)

(use-package pdf-tools
 :config
 (pdf-tools-install)
 (setq-default pdf-view-display-size 'fit-page)
 (setq pdf-view-resize-factor 1.1)
 ;; automatically annotate highlights
 ;;(setq pdf-annot-activate-created-annotations t)
 ;; use normal isearch
 ;;(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)

 ;; keyboard shortcuts
 (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
 (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
 (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
(add-hook 'pdf-view-mode-hook 'auto-revert-mode)

#+END_SRC

**** pdf-tool installation notes

pdf-tools will attempt to auto-compile if installed from melpa.

per https://github.com/politza/pdf-tools we need the following:

We need at least a C/C++ compiler (both gcc and g++), make, automake and autoconf.

$ sudo aptitude install libpng-dev zlib1g-dev
$ sudo aptitude install libpoppler-glib-dev
$ sudo aptitude install libpoppler-private-dev
$ sudo aptitude install imagemagick

* local-config.el

I maintain a =local-config.el= file outside of this repo for each individual machine I install emacs on.  Eventually these files may make their way
into source code, but not before I do a bunch of experimenting and rewriting on them.

As long as ~/.emacs.d/elisp has been added to the load path, this works:

#+BEGIN_SRC emacs-lisp
(load "local-config")

#+END_SRC

*** local config example

Q: How to tangle to a different file?

#+BEGIN_SRC elisp :tangle no

(setq initial-buffer-choice "/home/gloftus/doc/org/todo.org")

(setq org-agenda-files (quote
  (
  "/home/gloftus/doc/org/todo.org"
)))

(setq org-capture-templates
 '(
   ("b" "Bookmark" entry (file "/home/gloftus/doc/bkm/bookmarks.org")
        "* %^{Title} %^g\n  %^{URL}\n  %?Added: %U\n" :kill-buffer t)
   ("n" "Note" entry (file "/home/gloftus/doc/org/notes.org")
        "* %?\n  Added: %U\n" :kill-buffer t)
))

(setq org-todo-keywords
  '(
    (sequence "TODO" "|" "DONE(d)")
    (sequence "DOING(g)" "|")
    (sequence "DAILY(y)" "|")
    (sequence "QUES(q)" "|")
    (sequence "READ(r)" "|")
))

(setq org-todo-keyword-faces
  (quote (
	 ("TODO" :foreground "firebrick2" :weight bold)
	 ("DOING" :foreground "yellow" :weight bold)
         ("DAILY" :foreground "yellow" :weight bold)
         ("QUES" :foreground "violet" :weight bold)
         ("READ" :foreground "cornflower blue" :weight bold)
	 ("DONE" :foreground "pale green" :weight bold)
)))

#+END_SRC

nice.

* appendix
*** installing emacs

Are you reading this file in nano?
Wouldn't you prefer to read it in emacs??

You can install emacs (and dependencies) to create a shell script 
from this file that will automate the remaining installation.

All of the following appears in install.org and may alread be installed...

Here are the dependencies for building emacs:

#+BEGIN_SRC sh :tangle no
sudo apt-get install build-essential \
texinfo         libx11-dev       libxpm-dev   libjpeg-dev   \
libpng12-dev    libgif-dev       libtiff5-dev libgtk2.0-dev \
libncurses5-dev libxpm-dev       automake     autoconf      \
libxml2-dev     libfreetype6-dev libav-tools  emacs-goodies-el
#+END_SRC

And here's where to get emacs itself:

#+BEGIN_SRC sh :tangle no
sudo apt-get install curl
cd /home/gloftus/tmp
curl -O http://gnu.askapache.com/emacs/emacs-26.2.tar.gz
tar xzf emacs-26.2.tar.gz
cd emacs-26.2
./configure
make
sudo make install
#+END_SRC

**** known installation issues

Recent issues:

Configure failed!
apt-cache search 'libgnutls.*-dev' returns libgnutls28-dev, so:
sudo apt-get install libgnutls28-dev
success!

on 2017-12-19 the following issue occured while installing emacs:

configure says we're missing gtk+, so I installed it per above
now we get a gtk+ wanring about multiple displays
then configure gives a libpng error!
anaconda steals make path focus
and wants to use it's crappy libpng
so remove path append before doing configure

Q: dvipng for orgmode latex previews?

libpng12-dev over libpng-dev
libtiff5-dev over libtiff-dev
libncurses5-dev over libcurses-dev
autoconf, automake, build-essential, libncurses5-dev, libpng12-dev, libx11-dev
all already at newest version, see previous installs above

where did we download emacs from?
once you have it, cd into directory and run:

emacs24-common-non-dfsg is non-free documentation (emacs info pages, you should get it!)
emacs24-el is souce elisp files
emacs24-lucid is NOT what you want (diffevernt GUI)
emacs24-nox is NOT what you want (no X support)
emacs24-common contains architect. independent infrastructure shared by emacs24, lucid and nox
emacs24-bin-common contains architecture DEPENDENT infrastructure!

*** initializing your emacs environment

This init.el file assumes certain truths about the directories and files that exist on your computer.
You can run the following commands with the initialize-emacs-environment.sh script included in this repo.

#+BEGIN_SRC sh :tangle no
#!/bin/bash

# initialize emacs environment for init.el to run properly
EMACS_HOME="/home/gloftus/.emacs.d/"
cd $EMACS_HOME
mkdir elisp themes
touch elisp/customize.el elisp/local-config.el

# get the mustard theme (requires internet)
curl https://raw.githubusercontent.com/emacsfodder/emacs-mustard-theme/master/mustard-theme.el -o themes/mustard-theme.el

#+END_SRC  

*** quick start

If you don't want to deal with all this nonsense, 
just use the basic config file found in =init-basic.el=.

*** credits

The organization of this org file is influenced heavily by Mathie Marques' [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][Emacs config]].

I also drew heavily from David Wilson's [[https://github.com/daviwil/emacs-from-scratch][Emacs from scratch]].

